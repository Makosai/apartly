
-- Create the enum type for account types
create type acc_type as enum('none', 'realtor', 'user');

-- Create the users table
create table
  users (
    id uuid references auth.users.id on delete cascade primary key,
    account_type acc_type default acc_type.none,
    first_name text not null,
    last_name text not null
  );

-- Enable RLS for users
alter table users enable row level security;

-- Create a user.
create policy "user_create_policy"
on users for insert
to authenticated
with check ( (select auth.uid()) = id );

-- Allow everyone to read users.
create policy "user_read_policy"
on users for select
to anon
using ( true );

-- Allow users to change their first and last name.
-- Requires a function to verify only those two values change.
create policy "user_update_policy"
on users for update
to authenticated
using ( (select auth.uid()) = id )
with check ( (select auth.uid()) = id );

-- Deletion happens only when their auth account is deleted.
create policy "user_delete_policy"
on users for delete
to authenticated
using (false);
-- users are deleted with their auth (cascade)

-- Create the apartments table
create table
  apartments (
    id bigint generated by default as identity primary key,
    owner_id uuid not null,
    title text not null,
    preview_image uuid,
    description text not null,
    sq_footage int not null,
    rooms smallint not null,
    monthly_price numeric not null,
    location geography(point) not null
  );

  -- Enable RLS for apartments
alter table apartments enable row level security;

-- Create an apartment listing where you're the owner if you're a realtor.
-- needs a function that checks for the owner's ID and also verifies their account_type is acc_type.realtor.
create policy "apartment_create_policy"
on apartments for insert
to authenticated
with check ( (select auth.uid()) = owner_id );

-- Everyone can read the apartments list.
create policy "apartment_read_policy"
on apartments for select
to anon
using ( true );

-- Update the apartment listing if you're the owner.
-- Prevent updating it to someone else's owner ID with a function.
create policy "apartment_update_policy"
on users for update
to authenticated
using ( (select auth.uid()) = id )
with check ( (select auth.uid()) = id );

-- Delete the apartment if you own the listing.
create policy "apartment_delete_policy"
on users for delete
to authenticated
using (false);
